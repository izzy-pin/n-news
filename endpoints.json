{
  "GET /api": {
    "description": "serves up a json representation of all the available endpoints of the api"
  },
  "GET /api/topics": {
    "description": "serves an array of all topics",
    "queries": [],
    "exampleResponse": {
      "topics": [{ "slug": "football", "description": "Footie!" }]
    }
  },
  "GET /api/articles": {
    "description": "serves an array of all articles (newest to oldest), or all articles matching one or multiple queries",
    "queries": ["author", "topic", "sort_by", "order", "p", "limit"],
    "queryDescriptions": {
      "author": "filters articles posted by a valid username",
      "topic": "filters articles by a valid topic slug",
      "sort_by": "defaults to created_at unless specified as author, title, topic, votes, comment_count",
      "order": "either asc or desc, order defaults to descending to show articles newest to oldest, ascending is used to order author, title and topic alphabetically",
      "p": "specify page number of responses to display",
      "limit": "specify how many responses per page"
    },
    "exampleResponse": {
      "articles": [
        {
          "author": "weegembump",
          "title": "Seafood substitutions are increasing",
          "article_id": 1,
          "body": "Text from the article..",
          "topic": "cooking",
          "created_at": 1527695953341,
          "votes": 0,
          "comment_count": 3,
          "total_count": 15
        }
      ]
    }
  },
  "POST /api/articles": {
    "description": "posts a new article when the request body object includes a username, title, topic and body, it responds with an object of the new article",
    "queries": [],
    "request body": {
      "author": "butter_bridge",
      "title": "My first article ",
      "body": "Lots of interesting information",
      "topic": "coding"
    },
    "exampleResponse": {
      "article": {
        "article_id": 109,
        "votes": 0,
        "comment_count": 0,
        "created_at": 1586179020000,
        "author": "butter_bridge",
        "title": "My first article ",
        "body": "Lots of interesting information",
        "topic": "coding"
      }
    }
  },
  "GET /api/articles/:article_id": {
    "description": "serves an article object for the given article_id",
    "queries": [],
    "parameter": "a valid article_id number",
    "exampleResponse": {
      "article": {
        "author": "weegembump",
        "title": "Seafood substitutions are increasing",
        "article_id": 1,
        "body": "Text from the article..",
        "topic": "cooking",
        "created_at": 1527695953341,
        "votes": 0,
        "comment_count": 3
      }
    }
  },
  "PATCH /api/articles/:article_id": {
    "description": "updates the vote count for an article when path includes a valid article_id and the request body object has a value of a negative or positive integer, it responds with the updated article object",
    "queries": [],
    "parameter": "a valid article_id number",
    "request body": { "inc_votes": "newVote" },
    "exampleResponse": {
      "article": {
        "author": "weegembump",
        "title": "Seafood substitutions are increasing",
        "article_id": 1,
        "body": "Text from the article..",
        "topic": "cooking",
        "created_at": 1527695953341,
        "votes": 2,
        "comment_count": 3
      }
    }
  },
  "DELETE /api/articles/:article_id": {
    "description": "deletes an article when given a valid article_id, it has no response",
    "queries": [],
    "parameter": "a valid article_id"
  },
  "GET /api/articles/:article_id/comments": {
    "description": "serves an array of all the comments for an article, ordered newest to oldest",
    "queries": ["sort_by", "order", "p", "limit"],
    "queryDescriptions": {
      "sort_by": "sorts articles by created_at or vote, defaults to created_at",
      "order": "desc or asc, order defaults to descending to show comments newest to oldest",
      "p": "specify page number of responses to display",
      "limit": "specify how many responses per page"
    },
    "parameter": "a valid article_id number",
    "exampleResponse": {
      "comments": {
        "comment_id": 1,
        "votes": 16,
        "created_at": 1586179020000,
        "author": "butter_bridge",
        "body": "Text from the comment.."
      }
    }
  },

  "POST /api/articles/:article_id/comments": {
    "description": "posts a new comment for an article when path includes a valid article_id and the request body object includes a valid username and comment body as a string, it responds with an object of the new comment",
    "queries": [],
    "parameter": "a valid article_id number",
    "request body": {
      "username": "butter_bridge",
      "body": "love this article!"
    },
    "exampleResponse": {
      "comment": {
        "comment_id": 19,
        "votes": 0,
        "created_at": 1586179020000,
        "author": "butter_bridge",
        "body": "love this article!"
      }
    }
  },
  "PATCH /api/comments/:comment_id": {
    "description": "updates the vote count for an comment when path includes a valid comment_id and the request body object has a value of a negative or positive integer, it responds with the updated comment object",
    "queries": [],
    "parameter": "a valid comment_id number",
    "request body": { "inc_votes": "newVote" },
    "exampleResponse": {
      "comment": {
        "comment_id": 14,
        "author": "weegembump",
        "article_id": 1,
        "body": "Text from the article..",
        "created_at": 1527695953341,
        "votes": 2
      }
    }
  },
  "DELETE /api/comments/:comment_id": {
    "description": "deletes a comment when given a valid comment_id, it has no response",
    "queries": [],
    "parameter": "a valid comment_id"
  },
  "GET /api/users": {
    "description": "serves an array of all usernames as individual objects",
    "queries": [],
    "exampleResponse": {
      "topics": [{ "username": "lurker" }]
    }
  },
  "GET /api/users/:username": {
    "description": "serves a user object for a valid username",
    "queries": [],
    "exampleResponse": {
      "user": {
        "username": "icellusedkars",
        "name": "sam",
        "avatar_url": "https://avatars2.githubusercontent.com/u/24604688?s=460&v=4"
      }
    }
  }
}
